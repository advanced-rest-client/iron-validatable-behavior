{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "** Anypoint version of the iron-validatable-behavior **\n\nPolymer 2.0 Mixin class.\n\nThis element is to be private and used as a replacemenet to any PolymerElements\n\n\n`Use Polymer.IronValidatableBehavior` to implement an element that validates\nuser input.\nUse the related `Polymer.IronValidatorBehavior` to add custom validation logic\nto an iron-input.\n\nBy default, an `<iron-form>` element validates its fields when the user presses the submit\nbutton.\nTo validate a form imperatively, call the form's `validate()` method, which in turn will\ncall `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your\ncustom element will get a public `validate()`, which\nwill return the validity of the element, and a corresponding `invalid` attribute,\nwhich can be used for styling.\n\nTo implement the custom validation logic of your element, you must override\nthe protected `_getValidity()` method of this behaviour, rather than `validate()`.\nSee [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\nfor an example.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.",
      "summary": "",
      "path": "iron-validatable-behavior.html",
      "properties": [
        {
          "name": "validator",
          "type": "string | null | undefined",
          "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 10
            },
            "end": {
              "line": 262,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "validationStates",
          "type": "Array | null | undefined",
          "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 10
            },
            "end": {
              "line": 288,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_validatorMeta",
          "type": "Object | null | undefined",
          "description": "This property is deprecated and should not be used. Use the global\nvalidator meta singleton, `Polymer.IronValidatableMixinMeta` instead.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 10
            },
            "end": {
              "line": 296,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "validatorType",
          "type": "string | null | undefined",
          "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 10
            },
            "end": {
              "line": 306,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"validator\""
        },
        {
          "name": "_validator",
          "type": "Array | null | undefined",
          "description": "Overrides `Polymer.IronValidatableBehavior#_validator`\nList of validators to use.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 315,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hasValidator",
          "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          }
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 359,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          }
        },
        {
          "name": "_getValidity",
          "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`\n\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 6
            },
            "end": {
              "line": 393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "The value to be validated."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          }
        },
        {
          "name": "__computeValidator",
          "description": "Overrides `Polymer.IronValidatableBehavior#__computeValidator`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 6
            },
            "end": {
              "line": 416,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 246,
          "column": 2
        },
        "end": {
          "line": 419,
          "column": 4
        }
      },
      "privacy": "public",
      "name": "Polymer.IronValidatableMixin",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 10
            },
            "end": {
              "line": 262,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "validation-states",
          "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 10
            },
            "end": {
              "line": 288,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "validator-type",
          "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 10
            },
            "end": {
              "line": 306,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "** Anypoint version of the iron-validatable-behavior **\n\nThis element is to be private and used as a replacemenet to any PolymerElements\n\n\n`Use Polymer.IronValidatableBehavior` to implement an element that validates\nuser input.\nUse the related `Polymer.IronValidatorBehavior` to add custom validation logic\nto an iron-input.\n\nBy default, an `<iron-form>` element validates its fields when the user presses the submit\nbutton.\nTo validate a form imperatively, call the form's `validate()` method, which in turn will\ncall `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your\ncustom element will get a public `validate()`, which\nwill return the validity of the element, and a corresponding `invalid` attribute,\nwhich can be used for styling.\n\nTo implement the custom validation logic of your element, you must override\nthe protected `_getValidity()` method of this behaviour, rather than `validate()`.\nSee [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\nfor an example.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.",
          "summary": "",
          "path": "iron-validatable-behavior.html",
          "properties": [
            {
              "name": "validator",
              "type": "string | null | undefined",
              "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "validationStates",
              "type": "Array | null | undefined",
              "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "invalid",
              "type": "boolean | null | undefined",
              "description": "True if the last call to `validate` is invalid.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 6
                },
                "end": {
                  "line": 87,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_validatorMeta",
              "type": "Object | null | undefined",
              "description": "This property is deprecated and should not be used. Use the global\nvalidator meta singleton, `Polymer.IronValidatableBehaviorMeta` instead.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 6
                },
                "end": {
                  "line": 94,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "validatorType",
              "type": "string | null | undefined",
              "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 6
                },
                "end": {
                  "line": 103,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"validator\""
            },
            {
              "name": "_validator",
              "type": "Array | null | undefined",
              "description": "Overrides `Polymer.IronValidatableBehavior#_validator`\nList of validators to use.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 6
                },
                "end": {
                  "line": 112,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "registered",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 121,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_invalidChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 123,
                  "column": 4
                },
                "end": {
                  "line": 129,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "hasValidator",
              "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 4
                },
                "end": {
                  "line": 141,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "boolean",
                "desc": "True if the validator `validator` exists."
              }
            },
            {
              "name": "validate",
              "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 150,
                  "column": 4
                },
                "end": {
                  "line": 153,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "Object",
                  "description": "The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if `value` is valid."
              }
            },
            {
              "name": "_getValidity",
              "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`\n\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 165,
                  "column": 4
                },
                "end": {
                  "line": 186,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "Object",
                  "description": "The value to be validated."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if `value` is valid."
              }
            },
            {
              "name": "__computeValidator",
              "description": "Overrides `Polymer.IronValidatableBehavior#__computeValidator`",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 4
                },
                "end": {
                  "line": 208,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": "demo"
            },
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 209,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "Polymer.IronValidatableBehavior",
          "attributes": [
            {
              "name": "validator",
              "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "validation-states",
              "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "invalid",
              "description": "True if the last call to `validate` is invalid.",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 6
                },
                "end": {
                  "line": 87,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "validator-type",
              "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 6
                },
                "end": {
                  "line": 103,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "validation-states-changed",
              "description": "Fired when the `validationStates` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "invalid-changed",
              "description": "Fired when the `invalid` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  }
}

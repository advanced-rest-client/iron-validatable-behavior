{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "demo/cats-only.html",
      "properties": [],
      "methods": [
        {
          "name": "validateObject",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 30,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "CatsOnly",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cats-only"
    },
    {
      "description": "",
      "summary": "",
      "path": "demo/minimum-length.html",
      "properties": [],
      "methods": [
        {
          "name": "validateObject",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "validate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "MinimumLength",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "minimum-length"
    },
    {
      "description": "",
      "summary": "",
      "path": "demo/validatable-input.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onInput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ValidatableInput",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "validatable-input"
    }
  ],
  "mixins": [
    {
      "description": "** Anypoint version of the iron-validatable-behavior **\n\nThis element is to be private and used as a replacemenet to any PolymerElements\n\n\n`Use Polymer.IronValidatableBehavior` to implement an element that validates\nuser input.\nUse the related `Polymer.IronValidatorBehavior` to add custom validation logic\nto an iron-input.\n\nBy default, an `<iron-form>` element validates its fields when the user presses the submit\nbutton.\nTo validate a form imperatively, call the form's `validate()` method, which in turn will\ncall `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your\ncustom element will get a public `validate()`, which\nwill return the validity of the element, and a corresponding `invalid` attribute,\nwhich can be used for styling.\n\nTo implement the custom validation logic of your element, you must override\nthe protected `_getValidity()` method of this behaviour, rather than `validate()`.\nSee [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\nfor an example.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.",
      "summary": "",
      "path": "iron-validatable-behavior.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "validationStates",
          "type": "Array",
          "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 87,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true
            }
          }
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_validatorMeta",
          "type": "Object",
          "description": "This property is deprecated and should not be used. Use the global\nvalidator meta singleton, `Polymer.IronValidatableBehaviorMeta` instead.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "validatorType",
          "type": "string",
          "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"validator\""
        },
        {
          "name": "_validator",
          "type": "Array",
          "description": "Overrides `Polymer.IronValidatableBehavior#_validator`\nList of validators to use.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 141,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "hasValidator",
          "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          }
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 6
            },
            "end": {
              "line": 163,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          }
        },
        {
          "name": "_getValidity",
          "description": "Overrides `Polymer.IronValidatableBehavior#hasValidator`\n\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "The value to be validated."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          }
        },
        {
          "name": "__computeValidator",
          "description": "Overrides `Polymer.IronValidatableBehavior#__computeValidator`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 220,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 2
        },
        "end": {
          "line": 223,
          "column": 4
        }
      },
      "privacy": "public",
      "name": "Polymer.IronValidatableBehavior",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator or validators to use.\nIf the element should be validated by more than one validator then separate names with\nspace. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a\nvalidator.",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 10
            },
            "end": {
              "line": 71,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "validation-states",
          "description": "After calling `validate()` this is be populated by latest result of the\ntest for each validator. Result item contains following properties:\n\n- validator {String} Name of the validator\n- valid {Boolean} Result of the test\n- message {String} Error message\n\nThis property is `undefined` if `validator` is not set.",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 10
            },
            "end": {
              "line": 87,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "validator-type",
          "description": "Namespace for this validator. This property is deprecated and should\nnot be used. For all intents and purposes, please consider it a\nread-only, config-time property.",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}

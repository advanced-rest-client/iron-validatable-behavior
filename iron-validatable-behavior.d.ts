/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   iron-validatable-behavior.html
 */

/// <reference path="../polymer/types/lib/utils/mixin.d.ts" />
/// <reference path="../iron-meta/iron-meta.d.ts" />

declare namespace Polymer {


  /**
   * ** Anypoint version of the iron-validatable-behavior **
   *
   * This element is to be private and used as a replacemenet to any PolymerElements
   *
   *
   * `Use Polymer.IronValidatableBehavior` to implement an element that validates
   * user input.
   * Use the related `Polymer.IronValidatorBehavior` to add custom validation logic
   * to an iron-input.
   *
   * By default, an `<iron-form>` element validates its fields when the user presses the submit
   * button.
   * To validate a form imperatively, call the form's `validate()` method, which in turn will
   * call `validate()` on all its children. By using `Polymer.IronValidatableBehavior`, your
   * custom element will get a public `validate()`, which
   * will return the validity of the element, and a corresponding `invalid` attribute,
   * which can be used for styling.
   *
   * To implement the custom validation logic of your element, you must override
   * the protected `_getValidity()` method of this behaviour, rather than `validate()`.
   * See [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)
   * for an example.
   *
   * ### Accessibility
   *
   * Changing the `invalid` property, either manually or by calling `validate()` will update the
   * `aria-invalid` attribute.
   */
  function IronValidatableBehavior<T extends new (...args: any[]) => {}>(base: T): T & IronValidatableBehaviorConstructor;

  interface IronValidatableBehaviorConstructor {
    new(...args: any[]): IronValidatableBehavior;
  }

  interface IronValidatableBehavior {

    /**
     * Name of the validator or validators to use.
     * If the element should be validated by more than one validator then separate names with
     * space. See docs for `Polymer.PolymerValidatorBehavior` for description of how to define a
     * validator.
     */
    validator: string|null|undefined;

    /**
     * After calling `validate()` this is be populated by latest result of the
     * test for each validator. Result item contains following properties:
     *
     * - validator {String} Name of the validator
     * - valid {Boolean} Result of the test
     * - message {String} Error message
     *
     * This property is `undefined` if `validator` is not set.
     */
    readonly validationStates: any[]|null|undefined;

    /**
     * True if the last call to `validate` is invalid.
     */
    invalid: boolean|null|undefined;

    /**
     * This property is deprecated and should not be used. Use the global
     * validator meta singleton, `Polymer.IronValidatableBehaviorMeta` instead.
     */
    _validatorMeta: object|null|undefined;

    /**
     * Namespace for this validator. This property is deprecated and should
     * not be used. For all intents and purposes, please consider it a
     * read-only, config-time property.
     */
    validatorType: string|null|undefined;

    /**
     * Overrides `Polymer.IronValidatableBehavior#_validator`
     * List of validators to use.
     */
    readonly _validator: any[]|null|undefined;
    _invalidChanged(): void;

    /**
     * Overrides `Polymer.IronValidatableBehavior#hasValidator`
     *
     * @returns True if the validator `validator` exists.
     */
    hasValidator(): boolean;

    /**
     * Returns true if the `value` is valid, and updates `invalid`. If you want
     * your element to have custom validation logic, do not override this method;
     * override `_getValidity(value)` instead.
     *
     * @param value The value to be validated. By default, it is passed
     * to the validator's `validate()` function, if a validator is set.
     * @returns True if `value` is valid.
     */
    validate(value: object|null): boolean;

    /**
     * Overrides `Polymer.IronValidatableBehavior#hasValidator`
     *
     * Returns true if `value` is valid.  By default, it is passed
     * to the validator's `validate()` function, if a validator is set. You
     * should override this method if you want to implement custom validity
     * logic for your element.
     *
     * @param value The value to be validated.
     * @returns True if `value` is valid.
     */
    _getValidity(value: object|null): boolean;
  }
}
